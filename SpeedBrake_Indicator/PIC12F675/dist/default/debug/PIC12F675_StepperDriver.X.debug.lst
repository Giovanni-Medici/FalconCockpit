

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Feb 08 22:05:41 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bitnvBANK0,global,bit,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x5E,2
    26  0000                     
    27                           ; Version 2.32
    28                           ; Generated 23/11/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC12F675 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0019                     	;# 
    76  001E                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  008C                     	;# 
    81  008E                     	;# 
    82  0090                     	;# 
    83  0095                     	;# 
    84  0096                     	;# 
    85  0096                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0019                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  008C                     	;# 
   113  008E                     	;# 
   114  0090                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0096                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126                           
   127                           	psect	idataBANK0
   128  0216                     __pidataBANK0:
   129                           
   130                           ;initializer for _maxVel
   131  0216  3420               	retlw	32
   132  0217  3403               	retlw	3
   133                           
   134                           ;initializer for _steps
   135  0218  34C4               	retlw	196
   136  0219  340E               	retlw	14
   137                           
   138                           ;initializer for _defaultAccelTable
   139  021A  3414               	retlw	20
   140  021B  3400               	retlw	0
   141  021C  3420               	retlw	32
   142  021D  3403               	retlw	3
   143  021E  3432               	retlw	50
   144  021F  3400               	retlw	0
   145  0220  3490               	retlw	144
   146  0221  3401               	retlw	1
   147  0222  3464               	retlw	100
   148  0223  3400               	retlw	0
   149  0224  34C8               	retlw	200
   150  0225  3400               	retlw	0
   151  0226  3496               	retlw	150
   152  0227  3400               	retlw	0
   153  0228  3496               	retlw	150
   154  0229  3400               	retlw	0
   155  022A  342C               	retlw	44
   156  022B  3401               	retlw	1
   157  022C  345A               	retlw	90
   158  022D  3400               	retlw	0
   159                           
   160                           	psect	strings
   161  0001                     __pstrings:
   162  0001                     stringtab:
   163  0001                     __stringtab:
   164  0001                     stringcode:	
   165                           ;	String table - string pointers are 1 byte each
   166                           
   167  0001                     stringdir:
   168  0001  3000               	movlw	high stringdir
   169  0002  008A               	movwf	10
   170  0003  0804               	movf	4,w
   171  0004  0A84               	incf	4,f
   172  0005  0782               	addwf	2,f
   173  0006                     __stringbase:
   174  0006  3400               	retlw	0
   175  0007                     __end_of__stringtab:
   176  0007                     _resetStepMicrosec:
   177  0007  342C               	retlw	44
   178  0008  3401               	retlw	1
   179  0009                     __end_of_resetStepMicrosec:
   180  0009                     _stepPulseMicrosec:
   181  0009  3401               	retlw	1
   182  000A  3400               	retlw	0
   183  000B                     __end_of_stepPulseMicrosec:
   184                           
   185                           	psect	nvBANK0
   186  004F                     __pnvBANK0:
   187  004F                     _accelTable:
   188  004F                     	ds	1
   189                           
   190                           	psect	bitnvBANK0
   191  0280                     __pbitnvBANK0:
   192  0280                     _stopped:
   193  0280                     	ds	1
   194  0005                     _GPIO	set	5
   195  0019                     _CMCON	set	25
   196  001F                     _ADCON0	set	31
   197  0010                     _T1CON	set	16
   198  000F                     _TMR1H	set	15
   199  000E                     _TMR1L	set	14
   200  0028                     _GP0	set	40
   201  0029                     _GP1	set	41
   202  002A                     _GP2	set	42
   203  005B                     _GPIE	set	91
   204  005F                     _GIE	set	95
   205  005E                     _PEIE	set	94
   206  0060                     _T1IF	set	96
   207  0085                     _TRISIO	set	133
   208  0095                     _WPU	set	149
   209  0081                     _OPTION_REGbits	set	129
   210  0099                     _VRCON	set	153
   211  009F                     _ANSEL	set	159
   212  0460                     _T1IE	set	1120
   213                           
   214                           	psect	cinit
   215  03E9                     start_initialization:	
   216                           ; #config settings
   217                           
   218  03E9                     __initialization:
   219                           
   220                           ; Initialize objects allocated to BANK0
   221  03E9  1383               	bcf	3,7	;select IRP bank0
   222  03EA  3038               	movlw	low (__pdataBANK0+24)
   223  03EB  00DD               	movwf	btemp+-1
   224  03EC  3002               	movlw	high __pidataBANK0
   225  03ED  00DE               	movwf	btemp
   226  03EE  3016               	movlw	low __pidataBANK0
   227  03EF  00DF               	movwf	btemp+1
   228  03F0  3020               	movlw	low __pdataBANK0
   229  03F1  0084               	movwf	4
   230  03F2  21D4               	fcall	init_ram0
   231                           
   232                           ; Clear objects allocated to BANK0
   233  03F3  01C5               	clrf	__pbssBANK0& (0+127)
   234  03F4  01C6               	clrf	(__pbssBANK0+1)& (0+127)
   235  03F5  01C7               	clrf	(__pbssBANK0+2)& (0+127)
   236  03F6  01C8               	clrf	(__pbssBANK0+3)& (0+127)
   237  03F7  01C9               	clrf	(__pbssBANK0+4)& (0+127)
   238  03F8  01CA               	clrf	(__pbssBANK0+5)& (0+127)
   239  03F9  01CB               	clrf	(__pbssBANK0+6)& (0+127)
   240  03FA  01CC               	clrf	(__pbssBANK0+7)& (0+127)
   241  03FB  01CD               	clrf	(__pbssBANK0+8)& (0+127)
   242  03FC  01CE               	clrf	(__pbssBANK0+9)& (0+127)
   243  03FD                     end_of_initialization:	
   244                           ;End of C runtime variable initialization code
   245                           
   246  03FD                     __end_of__initialization:
   247  03FD  0183               	clrf	3
   248  03FE  2AB2               	ljmp	_main	;jump to C main() function
   249                           
   250                           	psect	bssBANK0
   251  0045                     __pbssBANK0:
   252  0045                     _dir:
   253  0045                     	ds	2
   254  0047                     _vel:
   255  0047                     	ds	2
   256  0049                     _microDelay:
   257  0049                     	ds	2
   258  004B                     _targetStep:
   259  004B                     	ds	2
   260  004D                     _currentStep:
   261  004D                     	ds	2
   262                           
   263                           	psect	dataBANK0
   264  0020                     __pdataBANK0:
   265  0020                     _maxVel:
   266  0020                     	ds	2
   267  0022                     _steps:
   268  0022                     	ds	2
   269  0024                     _defaultAccelTable:
   270  0024                     	ds	20
   271                           
   272                           	psect	inittext
   273  01D0                     init_fetch0:	
   274                           ;	Called with low address in FSR and high address in W
   275                           
   276  01D0  085E               	movf	btemp,w
   277  01D1  008A               	movwf	10
   278  01D2  085F               	movf	btemp+1,w
   279  01D3  0082               	movwf	2
   280  01D4                     init_ram0:	
   281                           ;Called with:
   282                           ;	high address of idata address in btemp 
   283                           ;	low address of idata address in btemp+1 
   284                           ;	low address of data in FSR
   285                           ;	high address + 1 of data in btemp-1
   286                           
   287  01D4  21D0               	fcall	init_fetch0
   288  01D5  0080               	movwf	0
   289  01D6  0A84               	incf	4,f
   290  01D7  0804               	movf	4,w
   291  01D8  065D               	xorwf	btemp+-1,w
   292  01D9  1903               	btfsc	3,2
   293  01DA  3400               	retlw	0
   294  01DB  0ADF               	incf	btemp+1,f
   295  01DC  1903               	btfsc	3,2
   296  01DD  0ADE               	incf	btemp,f
   297  01DE  29D4               	goto	init_ram0
   298                           
   299                           	psect	cstackCOMMON
   300  0000                     __pcstackCOMMON:
   301  0000                     ??_zero:
   302  0000                     ??_setPosition:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0000                     ??_update:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0000                     ??_InitTimer1:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0000                     ??_step:	
   312                           ; 1 bytes @ 0x0
   313                           
   314                           
   315                           	psect	cstackBANK0
   316  0038                     __pcstackBANK0:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0038                     ?_zero:
   320  0038                     ?_setPosition:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0038                     ?_update:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0038                     ?_InitTimer1:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0038                     ?_SwitecX12_init:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0038                     ??_SwitecX12_init:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0038                     ?_main:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0038                     ?_step:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0038                     ?_advance:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0038                     ?_ReadTimer1:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0038                     step@dir:	
   348                           ; 2 bytes @ 0x0
   349                           
   350  0038                     setPosition@pos:	
   351                           ; 2 bytes @ 0x0
   352                           
   353                           
   354                           ; 2 bytes @ 0x0
   355  0038                     	ds	2
   356  003A                     ??_ReadTimer1:
   357  003A                     ?_stepTo:	
   358                           ; 1 bytes @ 0x2
   359                           
   360  003A                     ??_advance:	
   361                           ; 1 bytes @ 0x2
   362                           
   363  003A                     stepTo@position:	
   364                           ; 1 bytes @ 0x2
   365                           
   366                           
   367                           ; 2 bytes @ 0x2
   368  003A                     	ds	1
   369  003B                     ReadTimer1@timer:
   370                           
   371                           ; 2 bytes @ 0x3
   372  003B                     	ds	1
   373  003C                     ??_stepTo:
   374                           
   375                           ; 1 bytes @ 0x4
   376  003C                     	ds	1
   377  003D                     stepTo@count:
   378                           
   379                           ; 2 bytes @ 0x5
   380  003D                     	ds	1
   381  003E                     advance@i:
   382                           
   383                           ; 1 bytes @ 0x6
   384  003E                     	ds	1
   385  003F                     stepTo@i:
   386  003F                     advance@delta:	
   387                           ; 2 bytes @ 0x7
   388                           
   389                           
   390                           ; 2 bytes @ 0x7
   391  003F                     	ds	2
   392  0041                     ??_main:
   393                           
   394                           ; 1 bytes @ 0x9
   395  0041                     	ds	3
   396  0044                     main@GP_input:
   397                           
   398                           ; 1 bytes @ 0xC
   399  0044                     	ds	1
   400                           
   401                           	psect	maintext
   402  02B2                     __pmaintext:	
   403 ;;
   404 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   405 ;;
   406 ;; *************** function _main *****************
   407 ;; Defined at:
   408 ;;		line 172 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  GP_input        1   12[BANK0 ] unsigned char 
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1    wreg      void 
   415 ;; Registers used:
   416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   417 ;; Tracked objects:
   418 ;;		On entry : B00/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMMON   BANK0
   422 ;;      Params:         0       0
   423 ;;      Locals:         0       1
   424 ;;      Temps:          0       3
   425 ;;      Totals:         0       4
   426 ;;Total ram usage:        4 bytes
   427 ;; Hardware stack levels required when called: 3
   428 ;; This function calls:
   429 ;;		_SwitecX12_init
   430 ;;		_setPosition
   431 ;;		_update
   432 ;;		_zero
   433 ;; This function is called by:
   434 ;;		Startup code after reset
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           
   439                           ;psect for function _main
   440  02B2                     _main:
   441  02B2                     l1086:	
   442                           ;incstack = 0
   443                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   444                           
   445                           
   446                           ;main.c: 176:     ANSEL = 0x00;
   447  02B2  1683               	bsf	3,5	;RP0=1, select bank1
   448  02B3  019F               	clrf	31	;volatile
   449                           
   450                           ;main.c: 177:     ADCON0 = 0x00;
   451  02B4  1283               	bcf	3,5	;RP0=0, select bank0
   452  02B5  019F               	clrf	31	;volatile
   453  02B6                     l1088:
   454                           
   455                           ;main.c: 178:     CMCON = 0x07;
   456  02B6  3007               	movlw	7
   457  02B7  0099               	movwf	25	;volatile
   458  02B8                     l1090:
   459                           
   460                           ;main.c: 179:     VRCON = 0x00;
   461  02B8  1683               	bsf	3,5	;RP0=1, select bank1
   462  02B9  0199               	clrf	25	;volatile
   463  02BA                     l1092:
   464                           
   465                           ;main.c: 181:     OPTION_REGbits.nGPPU = 0;
   466  02BA  1381               	bcf	1,7	;volatile
   467                           
   468                           ;main.c: 182:     WPU = 0b00110000;
   469  02BB  3030               	movlw	48
   470  02BC  0095               	movwf	21	;volatile
   471  02BD                     l1094:
   472                           
   473                           ;main.c: 184:     GPIO = 0x00;
   474  02BD  1283               	bcf	3,5	;RP0=0, select bank0
   475  02BE  0185               	clrf	5	;volatile
   476  02BF                     l1096:
   477                           
   478                           ;main.c: 185:     TRISIO = 0b00110000;
   479  02BF  3030               	movlw	48
   480  02C0  1683               	bsf	3,5	;RP0=1, select bank1
   481  02C1  0085               	movwf	5	;volatile
   482  02C2                     l1098:
   483                           
   484                           ;main.c: 186:     GPIE = 0;
   485  02C2  118B               	bcf	11,3	;volatile
   486  02C3                     l1100:
   487                           
   488                           ;main.c: 189:     SwitecX12_init();
   489  02C3  21F0               	fcall	_SwitecX12_init
   490  02C4                     l1102:
   491                           
   492                           ;main.c: 190:     _delay((unsigned long)((500)*(4000000/4000.0)));
   493  02C4  3003               	movlw	3
   494  02C5  1283               	bcf	3,5	;RP0=0, select bank0
   495  02C6  00C3               	movwf	??_main+2
   496  02C7  308A               	movlw	138
   497  02C8  00C2               	movwf	??_main+1
   498  02C9  3055               	movlw	85
   499  02CA  00C1               	movwf	??_main
   500  02CB                     u397:
   501  02CB  0BC1               	decfsz	??_main,f
   502  02CC  2ACB               	goto	u397
   503  02CD  0BC2               	decfsz	??_main+1,f
   504  02CE  2ACB               	goto	u397
   505  02CF  0BC3               	decfsz	??_main+2,f
   506  02D0  2ACB               	goto	u397
   507  02D1  2AD2               	nop2
   508  02D2                     l1104:
   509                           
   510                           ;main.c: 191:     GP2 = 1;
   511  02D2  1283               	bcf	3,5	;RP0=0, select bank0
   512  02D3  1505               	bsf	5,2	;volatile
   513  02D4                     l1106:
   514                           
   515                           ;main.c: 194:     _delay((unsigned long)((100)*(4000000/4000.0)));
   516  02D4  3082               	movlw	130
   517  02D5  00C2               	movwf	??_main+1
   518  02D6  30DD               	movlw	221
   519  02D7  00C1               	movwf	??_main
   520  02D8                     u407:
   521  02D8  0BC1               	decfsz	??_main,f
   522  02D9  2AD8               	goto	u407
   523  02DA  0BC2               	decfsz	??_main+1,f
   524  02DB  2AD8               	goto	u407
   525  02DC  2ADD               	nop2
   526  02DD                     l1108:
   527                           
   528                           ;main.c: 196:     zero();
   529  02DD  21DF               	fcall	_zero
   530  02DE                     l1110:
   531                           
   532                           ;main.c: 197:     _delay((unsigned long)((500)*(4000000/4000.0)));
   533  02DE  3003               	movlw	3
   534  02DF  1283               	bcf	3,5	;RP0=0, select bank0
   535  02E0  00C3               	movwf	??_main+2
   536  02E1  308A               	movlw	138
   537  02E2  00C2               	movwf	??_main+1
   538  02E3  3055               	movlw	85
   539  02E4  00C1               	movwf	??_main
   540  02E5                     u417:
   541  02E5  0BC1               	decfsz	??_main,f
   542  02E6  2AE5               	goto	u417
   543  02E7  0BC2               	decfsz	??_main+1,f
   544  02E8  2AE5               	goto	u417
   545  02E9  0BC3               	decfsz	??_main+2,f
   546  02EA  2AE5               	goto	u417
   547  02EB  2AEC               	nop2
   548  02EC                     l1112:
   549                           
   550                           ;main.c: 202:         GP_input = ( (GPIO >> 4) & (0b0011) );
   551  02EC  1283               	bcf	3,5	;RP0=0, select bank0
   552  02ED  0805               	movf	5,w	;volatile
   553  02EE  00C1               	movwf	??_main
   554  02EF  3004               	movlw	4
   555  02F0                     u385:
   556  02F0  1003               	clrc
   557  02F1  0CC1               	rrf	??_main,f
   558  02F2  3EFF               	addlw	-1
   559  02F3  1D03               	skipz
   560  02F4  2AF0               	goto	u385
   561  02F5  0841               	movf	??_main,w
   562  02F6  3903               	andlw	3
   563  02F7  00C2               	movwf	??_main+1
   564  02F8  0842               	movf	??_main+1,w
   565  02F9  00C4               	movwf	main@GP_input
   566                           
   567                           ;main.c: 204:         switch(GP_input)
   568  02FA  2B0D               	goto	l1122
   569  02FB                     l1114:
   570                           
   571                           ;main.c: 207:             {;main.c: 208:                 setPosition(2080);
   572  02FB  3020               	movlw	32
   573  02FC  00B8               	movwf	setPosition@pos
   574  02FD  3008               	movlw	8
   575  02FE  00B9               	movwf	setPosition@pos+1
   576  02FF  222E               	fcall	_setPosition
   577                           
   578                           ;main.c: 209:                 break;
   579  0300  2B1D               	goto	l1124
   580  0301                     l1116:
   581                           
   582                           ;main.c: 212:             {;main.c: 213:                 setPosition(1040);
   583  0301  3010               	movlw	16
   584  0302  00B8               	movwf	setPosition@pos
   585  0303  3004               	movlw	4
   586  0304  00B9               	movwf	setPosition@pos+1
   587  0305  222E               	fcall	_setPosition
   588                           
   589                           ;main.c: 214:                 break;
   590  0306  2B1D               	goto	l1124
   591  0307                     l1118:
   592                           
   593                           ;main.c: 217:             {;main.c: 218:                 setPosition(1600);
   594  0307  3040               	movlw	64
   595  0308  00B8               	movwf	setPosition@pos
   596  0309  3006               	movlw	6
   597  030A  00B9               	movwf	setPosition@pos+1
   598  030B  222E               	fcall	_setPosition
   599                           
   600                           ;main.c: 219:                 break;
   601  030C  2B1D               	goto	l1124
   602  030D                     l1122:
   603  030D  0844               	movf	main@GP_input,w
   604  030E  00C1               	movwf	??_main
   605  030F  01C2               	clrf	??_main+1
   606                           
   607                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   608                           ; Switch size 1, requested type "simple"
   609                           ; Number of cases is 1, Range of values is 0 to 0
   610                           ; switch strategies available:
   611                           ; Name         Instructions Cycles
   612                           ; simple_byte            4     3 (average)
   613                           ; direct_byte            7     6 (fixed)
   614                           ; jumptable            260     6 (fixed)
   615                           ;	Chosen strategy is simple_byte
   616  0310  0842               	movf	??_main+1,w
   617  0311  3A00               	xorlw	0	; case 0
   618  0312  1903               	skipnz
   619  0313  2B15               	goto	l1162
   620  0314  2B07               	goto	l1118
   621  0315                     l1162:
   622                           
   623                           ; Switch size 1, requested type "simple"
   624                           ; Number of cases is 2, Range of values is 2 to 3
   625                           ; switch strategies available:
   626                           ; Name         Instructions Cycles
   627                           ; simple_byte            7     4 (average)
   628                           ; direct_byte           11     9 (fixed)
   629                           ; jumptable            263     9 (fixed)
   630                           ;	Chosen strategy is simple_byte
   631  0315  0841               	movf	??_main,w
   632  0316  3A02               	xorlw	2	; case 2
   633  0317  1903               	skipnz
   634  0318  2AFB               	goto	l1114
   635  0319  3A01               	xorlw	1	; case 3
   636  031A  1903               	skipnz
   637  031B  2B01               	goto	l1116
   638  031C  2B07               	goto	l1118
   639  031D                     l1124:
   640                           
   641                           ;main.c: 223:         update();
   642  031D  2203               	fcall	_update
   643  031E  2AEC               	goto	l1112
   644  031F  2800               	ljmp	start
   645  0320                     __end_of_main:
   646                           
   647                           	psect	text1
   648  01DF                     __ptext1:	
   649 ;; *************** function _zero *****************
   650 ;; Defined at:
   651 ;;		line 275 in file "main.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;		None
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      void 
   658 ;; Registers used:
   659 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMMON   BANK0
   665 ;;      Params:         0       0
   666 ;;      Locals:         0       0
   667 ;;      Temps:          0       0
   668 ;;      Totals:         0       0
   669 ;;Total ram usage:        0 bytes
   670 ;; Hardware stack levels used: 1
   671 ;; Hardware stack levels required when called: 2
   672 ;; This function calls:
   673 ;;		_stepTo
   674 ;; This function is called by:
   675 ;;		_main
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           
   680                           ;psect for function _zero
   681  01DF                     _zero:
   682  01DF                     l1058:	
   683                           ;incstack = 0
   684                           ; Regs used in _zero: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   685                           
   686                           
   687                           ;main.c: 277:     currentStep = steps - 1;
   688  01DF  30C3               	movlw	195
   689  01E0  1283               	bcf	3,5	;RP0=0, select bank0
   690  01E1  00CD               	movwf	_currentStep
   691  01E2  300E               	movlw	14
   692  01E3  00CE               	movwf	_currentStep+1
   693  01E4                     l1060:
   694                           
   695                           ;main.c: 278:     stepTo(0);
   696  01E4  3000               	movlw	0
   697  01E5  00BA               	movwf	stepTo@position
   698  01E6  00BB               	movwf	stepTo@position+1
   699  01E7  226E               	fcall	_stepTo
   700  01E8                     l1062:
   701                           
   702                           ;main.c: 279:     targetStep = 0;
   703  01E8  1283               	bcf	3,5	;RP0=0, select bank0
   704  01E9  01CB               	clrf	_targetStep
   705  01EA  01CC               	clrf	_targetStep+1
   706  01EB                     l1064:
   707                           
   708                           ;main.c: 280:     vel = 0;
   709  01EB  01C7               	clrf	_vel
   710  01EC  01C8               	clrf	_vel+1
   711  01ED                     l1066:
   712                           
   713                           ;main.c: 281:     dir = 0;
   714  01ED  01C5               	clrf	_dir
   715  01EE  01C6               	clrf	_dir+1
   716  01EF                     l110:
   717  01EF  0008               	return
   718  01F0                     __end_of_zero:
   719                           
   720                           	psect	text2
   721  026E                     __ptext2:	
   722 ;; *************** function _stepTo *****************
   723 ;; Defined at:
   724 ;;		line 258 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;  position        2    2[BANK0 ] unsigned int 
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  i               2    7[BANK0 ] int 
   729 ;;  count           2    5[BANK0 ] unsigned int 
   730 ;; Return value:  Size  Location     Type
   731 ;;                  1    wreg      void 
   732 ;; Registers used:
   733 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMMON   BANK0
   739 ;;      Params:         0       2
   740 ;;      Locals:         0       4
   741 ;;      Temps:          0       1
   742 ;;      Totals:         0       7
   743 ;;Total ram usage:        7 bytes
   744 ;; Hardware stack levels used: 1
   745 ;; Hardware stack levels required when called: 1
   746 ;; This function calls:
   747 ;;		_step
   748 ;; This function is called by:
   749 ;;		_zero
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753                           
   754                           ;psect for function _stepTo
   755  026E                     _stepTo:
   756  026E                     l980:	
   757                           ;incstack = 0
   758                           ; Regs used in _stepTo: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   759                           
   760                           
   761                           ;main.c: 259:     unsigned int count;;main.c: 261:     if (position > currentStep) {
   762  026E  1283               	bcf	3,5	;RP0=0, select bank0
   763  026F  083B               	movf	stepTo@position+1,w
   764  0270  024E               	subwf	_currentStep+1,w
   765  0271  1D03               	skipz
   766  0272  2A75               	goto	u215
   767  0273  083A               	movf	stepTo@position,w
   768  0274  024D               	subwf	_currentStep,w
   769  0275                     u215:
   770  0275  1803               	skipnc
   771  0276  2A78               	goto	u211
   772  0277  2A79               	goto	u210
   773  0278                     u211:
   774  0278  2A86               	goto	l986
   775  0279                     u210:
   776  0279                     l982:
   777                           
   778                           ;main.c: 262:         dir = 1;
   779  0279  3001               	movlw	1
   780  027A  00C5               	movwf	_dir
   781  027B  3000               	movlw	0
   782  027C  00C6               	movwf	_dir+1
   783  027D                     l984:
   784                           
   785                           ;main.c: 263:         count = position - currentStep;
   786  027D  084D               	movf	_currentStep,w
   787  027E  023A               	subwf	stepTo@position,w
   788  027F  00BD               	movwf	stepTo@count
   789  0280  084E               	movf	_currentStep+1,w
   790  0281  1C03               	skipc
   791  0282  0A4E               	incf	_currentStep+1,w
   792  0283  023B               	subwf	stepTo@position+1,w
   793  0284  00BE               	movwf	stepTo@count+1
   794                           
   795                           ;main.c: 264:     } else {
   796  0285  2A92               	goto	l990
   797  0286                     l986:
   798                           
   799                           ;main.c: 265:         dir = -1;
   800  0286  30FF               	movlw	255
   801  0287  00C5               	movwf	_dir
   802  0288  30FF               	movlw	255
   803  0289  00C6               	movwf	_dir+1
   804  028A                     l988:
   805                           
   806                           ;main.c: 266:         count = currentStep - position;
   807  028A  083A               	movf	stepTo@position,w
   808  028B  024D               	subwf	_currentStep,w
   809  028C  00BD               	movwf	stepTo@count
   810  028D  083B               	movf	stepTo@position+1,w
   811  028E  1C03               	skipc
   812  028F  0A3B               	incf	stepTo@position+1,w
   813  0290  024E               	subwf	_currentStep+1,w
   814  0291  00BE               	movwf	stepTo@count+1
   815  0292                     l990:
   816                           
   817                           ;main.c: 268:     for (int i = 0; i < count; i++) {
   818  0292  01BF               	clrf	stepTo@i
   819  0293  01C0               	clrf	stepTo@i+1
   820  0294  2AA7               	goto	l998
   821  0295                     l992:
   822                           
   823                           ;main.c: 269:         step(dir);
   824  0295  0846               	movf	_dir+1,w
   825  0296  00B9               	movwf	step@dir+1
   826  0297  0845               	movf	_dir,w
   827  0298  00B8               	movwf	step@dir
   828  0299  224A               	fcall	_step
   829  029A                     l994:
   830                           
   831                           ;main.c: 270:         _delay((unsigned long)((resetStepMicrosec)*(4000000/4000000.0)));
   832  029A  3063               	movlw	99
   833  029B  1283               	bcf	3,5	;RP0=0, select bank0
   834  029C  00BC               	movwf	??_stepTo
   835  029D                     u427:
   836  029D  0BBC               	decfsz	??_stepTo,f
   837  029E  2A9D               	goto	u427
   838  029F  2AA0               	nop2
   839  02A0                     l996:
   840                           
   841                           ;main.c: 272:     }
   842  02A0  3001               	movlw	1
   843  02A1  1283               	bcf	3,5	;RP0=0, select bank0
   844  02A2  07BF               	addwf	stepTo@i,f
   845  02A3  1803               	skipnc
   846  02A4  0AC0               	incf	stepTo@i+1,f
   847  02A5  3000               	movlw	0
   848  02A6  07C0               	addwf	stepTo@i+1,f
   849  02A7                     l998:
   850  02A7  083E               	movf	stepTo@count+1,w
   851  02A8  0240               	subwf	stepTo@i+1,w
   852  02A9  1D03               	skipz
   853  02AA  2AAD               	goto	u225
   854  02AB  083D               	movf	stepTo@count,w
   855  02AC  023F               	subwf	stepTo@i,w
   856  02AD                     u225:
   857  02AD  1C03               	skipc
   858  02AE  2AB0               	goto	u221
   859  02AF  2AB1               	goto	u220
   860  02B0                     u221:
   861  02B0  2A95               	goto	l992
   862  02B1                     u220:
   863  02B1                     l107:
   864  02B1  0008               	return
   865  02B2                     __end_of_stepTo:
   866                           
   867                           	psect	text3
   868  0203                     __ptext3:	
   869 ;; *************** function _update *****************
   870 ;; Defined at:
   871 ;;		line 345 in file "main.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;		None
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMMON   BANK0
   885 ;;      Params:         0       0
   886 ;;      Locals:         0       0
   887 ;;      Temps:          0       0
   888 ;;      Totals:         0       0
   889 ;;Total ram usage:        0 bytes
   890 ;; Hardware stack levels used: 1
   891 ;; Hardware stack levels required when called: 2
   892 ;; This function calls:
   893 ;;		_ReadTimer1
   894 ;;		_advance
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           
   901                           ;psect for function _update
   902  0203                     _update:
   903  0203                     l1080:	
   904                           ;incstack = 0
   905                           ; Regs used in _update: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   906                           
   907                           
   908                           ;main.c: 346:     if (!stopped) {
   909  0203  1283               	bcf	3,5	;RP0=0, select bank0
   910  0204  1850               	btfsc	_stopped/(0+8),_stopped& (0+7)
   911  0205  2A07               	goto	u361
   912  0206  2A08               	goto	u360
   913  0207                     u361:
   914  0207  2A15               	goto	l142
   915  0208                     u360:
   916  0208                     l1082:
   917                           
   918                           ;main.c: 349:         if (ReadTimer1() >= microDelay) {
   919  0208  21C2               	fcall	_ReadTimer1
   920  0209  1283               	bcf	3,5	;RP0=0, select bank0
   921  020A  084A               	movf	_microDelay+1,w
   922  020B  0239               	subwf	?_ReadTimer1+1,w
   923  020C  1D03               	skipz
   924  020D  2A10               	goto	u375
   925  020E  0849               	movf	_microDelay,w
   926  020F  0238               	subwf	?_ReadTimer1,w
   927  0210                     u375:
   928  0210  1C03               	skipc
   929  0211  2A13               	goto	u371
   930  0212  2A14               	goto	u370
   931  0213                     u371:
   932  0213  2A15               	goto	l142
   933  0214                     u370:
   934  0214                     l1084:
   935                           
   936                           ;main.c: 350:             advance();
   937  0214  2320               	fcall	_advance
   938  0215                     l142:
   939  0215  0008               	return
   940  0216                     __end_of_update:
   941                           
   942                           	psect	text4
   943  0320                     __ptext4:	
   944 ;; *************** function _advance *****************
   945 ;; Defined at:
   946 ;;		line 284 in file "main.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  delta           2    7[BANK0 ] int 
   951 ;;  i               1    6[BANK0 ] unsigned char 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMMON   BANK0
   961 ;;      Params:         0       0
   962 ;;      Locals:         0       3
   963 ;;      Temps:          0       4
   964 ;;      Totals:         0       7
   965 ;;Total ram usage:        7 bytes
   966 ;; Hardware stack levels used: 1
   967 ;; Hardware stack levels required when called: 1
   968 ;; This function calls:
   969 ;;		_InitTimer1
   970 ;;		_step
   971 ;; This function is called by:
   972 ;;		_update
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           
   977                           ;psect for function _advance
   978  0320                     _advance:
   979  0320                     l1000:	
   980                           ;incstack = 0
   981                           ; Regs used in _advance: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   982                           
   983                           
   984                           ;main.c: 286:     if (currentStep == targetStep && vel == 0) {
   985  0320  1283               	bcf	3,5	;RP0=0, select bank0
   986  0321  084C               	movf	_targetStep+1,w
   987  0322  064E               	xorwf	_currentStep+1,w
   988  0323  1D03               	skipz
   989  0324  2B27               	goto	u235
   990  0325  084B               	movf	_targetStep,w
   991  0326  064D               	xorwf	_currentStep,w
   992  0327                     u235:
   993  0327  1D03               	skipz
   994  0328  2B2A               	goto	u231
   995  0329  2B2B               	goto	u230
   996  032A                     u231:
   997  032A  2B36               	goto	l1012
   998  032B                     u230:
   999  032B                     l1002:
  1000  032B  0847               	movf	_vel,w
  1001  032C  0448               	iorwf	_vel+1,w
  1002  032D  1D03               	btfss	3,2
  1003  032E  2B30               	goto	u241
  1004  032F  2B31               	goto	u240
  1005  0330                     u241:
  1006  0330  2B36               	goto	l1012
  1007  0331                     u240:
  1008  0331                     l1004:
  1009                           
  1010                           ;main.c: 287:         stopped = 1;
  1011  0331  1450               	bsf	_stopped/(0+8),_stopped& (0+7)
  1012  0332                     l1006:
  1013                           
  1014                           ;main.c: 288:         dir = 0;
  1015  0332  01C5               	clrf	_dir
  1016  0333  01C6               	clrf	_dir+1
  1017  0334                     l1008:
  1018                           
  1019                           ;main.c: 289:         InitTimer1();
  1020  0334  21B4               	fcall	_InitTimer1
  1021  0335  2BE8               	goto	l114
  1022  0336                     l1012:
  1023                           
  1024                           ;main.c: 295:     if (vel == 0) {
  1025  0336  0847               	movf	_vel,w
  1026  0337  0448               	iorwf	_vel+1,w
  1027  0338  1D03               	btfss	3,2
  1028  0339  2B3B               	goto	u251
  1029  033A  2B3C               	goto	u250
  1030  033B                     u251:
  1031  033B  2B53               	goto	l1020
  1032  033C                     u250:
  1033  033C                     l1014:
  1034                           
  1035                           ;main.c: 296:         dir = currentStep < targetStep ? 1 : -1;
  1036  033C  084C               	movf	_targetStep+1,w
  1037  033D  024E               	subwf	_currentStep+1,w
  1038  033E  1D03               	skipz
  1039  033F  2B42               	goto	u265
  1040  0340  084B               	movf	_targetStep,w
  1041  0341  024D               	subwf	_currentStep,w
  1042  0342                     u265:
  1043  0342  1C03               	skipc
  1044  0343  2B45               	goto	u261
  1045  0344  2B46               	goto	u260
  1046  0345                     u261:
  1047  0345  2B4B               	goto	l1018
  1048  0346                     u260:
  1049  0346                     l1016:
  1050  0346  30FF               	movlw	255
  1051  0347  00C5               	movwf	_dir
  1052  0348  30FF               	movlw	255
  1053  0349  00C6               	movwf	_dir+1
  1054  034A  2B4F               	goto	l119
  1055  034B                     l1018:
  1056  034B  3001               	movlw	1
  1057  034C  00C5               	movwf	_dir
  1058  034D  3000               	movlw	0
  1059  034E  00C6               	movwf	_dir+1
  1060  034F                     l119:
  1061                           
  1062                           ;main.c: 298:         vel = 1;
  1063  034F  3001               	movlw	1
  1064  0350  00C7               	movwf	_vel
  1065  0351  3000               	movlw	0
  1066  0352  00C8               	movwf	_vel+1
  1067  0353                     l1020:
  1068                           
  1069                           ;main.c: 301:     step(dir);
  1070  0353  0846               	movf	_dir+1,w
  1071  0354  00B9               	movwf	step@dir+1
  1072  0355  0845               	movf	_dir,w
  1073  0356  00B8               	movwf	step@dir
  1074  0357  224A               	fcall	_step
  1075  0358                     l1022:
  1076                           
  1077                           ;main.c: 305:     int delta = dir > 0 ? (signed int)targetStep - (signed int)currentStep
      +                           : (signed int)currentStep - (signed int)targetStep;
  1078  0358  1283               	bcf	3,5	;RP0=0, select bank0
  1079  0359  0846               	movf	_dir+1,w
  1080  035A  3A80               	xorlw	128
  1081  035B  00DF               	movwf	btemp+1
  1082  035C  3080               	movlw	128
  1083  035D  025F               	subwf	btemp+1,w
  1084  035E  1D03               	skipz
  1085  035F  2B62               	goto	u275
  1086  0360  3001               	movlw	1
  1087  0361  0245               	subwf	_dir,w
  1088  0362                     u275:
  1089  0362  1803               	skipnc
  1090  0363  2B65               	goto	u271
  1091  0364  2B66               	goto	u270
  1092  0365                     u271:
  1093  0365  2B70               	goto	l1026
  1094  0366                     u270:
  1095  0366                     l1024:
  1096  0366  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0367  084B               	movf	_targetStep,w
  1098  0368  024D               	subwf	_currentStep,w
  1099  0369  00BF               	movwf	advance@delta
  1100  036A  084C               	movf	_targetStep+1,w
  1101  036B  1C03               	skipc
  1102  036C  0A4C               	incf	_targetStep+1,w
  1103  036D  024E               	subwf	_currentStep+1,w
  1104  036E  00C0               	movwf	advance@delta+1
  1105  036F  2B79               	goto	l1028
  1106  0370                     l1026:
  1107  0370  1283               	bcf	3,5	;RP0=0, select bank0
  1108  0371  084D               	movf	_currentStep,w
  1109  0372  024B               	subwf	_targetStep,w
  1110  0373  00BF               	movwf	advance@delta
  1111  0374  084E               	movf	_currentStep+1,w
  1112  0375  1C03               	skipc
  1113  0376  0A4E               	incf	_currentStep+1,w
  1114  0377  024C               	subwf	_targetStep+1,w
  1115  0378  00C0               	movwf	advance@delta+1
  1116  0379                     l1028:
  1117                           
  1118                           ;main.c: 307:     if (delta > 0) {
  1119  0379  0840               	movf	advance@delta+1,w
  1120  037A  3A80               	xorlw	128
  1121  037B  00DF               	movwf	btemp+1
  1122  037C  3080               	movlw	128
  1123  037D  025F               	subwf	btemp+1,w
  1124  037E  1D03               	skipz
  1125  037F  2B82               	goto	u285
  1126  0380  3001               	movlw	1
  1127  0381  023F               	subwf	advance@delta,w
  1128  0382                     u285:
  1129  0382  1C03               	skipc
  1130  0383  2B85               	goto	u281
  1131  0384  2B86               	goto	u280
  1132  0385                     u281:
  1133  0385  2BA8               	goto	l1038
  1134  0386                     u280:
  1135  0386                     l1030:
  1136                           
  1137                           ;main.c: 309:         if (delta < vel) {
  1138  0386  1283               	bcf	3,5	;RP0=0, select bank0
  1139  0387  0848               	movf	_vel+1,w
  1140  0388  0240               	subwf	advance@delta+1,w
  1141  0389  1D03               	skipz
  1142  038A  2B8D               	goto	u295
  1143  038B  0847               	movf	_vel,w
  1144  038C  023F               	subwf	advance@delta,w
  1145  038D                     u295:
  1146  038D  1803               	skipnc
  1147  038E  2B90               	goto	u291
  1148  038F  2B91               	goto	u290
  1149  0390                     u291:
  1150  0390  2B96               	goto	l1034
  1151  0391                     u290:
  1152  0391                     l1032:
  1153                           
  1154                           ;main.c: 311:             vel = (unsigned int)delta;
  1155  0391  0840               	movf	advance@delta+1,w
  1156  0392  00C8               	movwf	_vel+1
  1157  0393  083F               	movf	advance@delta,w
  1158  0394  00C7               	movwf	_vel
  1159                           
  1160                           ;main.c: 312:         } else if (vel < maxVel) {
  1161  0395  2BAF               	goto	l1040
  1162  0396                     l1034:
  1163  0396  0821               	movf	_maxVel+1,w
  1164  0397  0248               	subwf	_vel+1,w
  1165  0398  1D03               	skipz
  1166  0399  2B9C               	goto	u305
  1167  039A  0820               	movf	_maxVel,w
  1168  039B  0247               	subwf	_vel,w
  1169  039C                     u305:
  1170  039C  1803               	skipnc
  1171  039D  2B9F               	goto	u301
  1172  039E  2BA0               	goto	u300
  1173  039F                     u301:
  1174  039F  2BA7               	goto	l126
  1175  03A0                     u300:
  1176  03A0                     l1036:
  1177                           
  1178                           ;main.c: 314:             vel++;
  1179  03A0  3001               	movlw	1
  1180  03A1  07C7               	addwf	_vel,f
  1181  03A2  1803               	skipnc
  1182  03A3  0AC8               	incf	_vel+1,f
  1183  03A4  3000               	movlw	0
  1184  03A5  07C8               	addwf	_vel+1,f
  1185                           
  1186                           ;main.c: 315:         } else {
  1187  03A6  2BAF               	goto	l1040
  1188  03A7                     l126:
  1189                           
  1190                           ;main.c: 318:     } else {
  1191  03A7  2BAF               	goto	l1040
  1192  03A8                     l1038:
  1193                           
  1194                           ;main.c: 320:         vel--;
  1195  03A8  3001               	movlw	1
  1196  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  1197  03AA  02C7               	subwf	_vel,f
  1198  03AB  3000               	movlw	0
  1199  03AC  1C03               	skipc
  1200  03AD  03C8               	decf	_vel+1,f
  1201  03AE  02C8               	subwf	_vel+1,f
  1202  03AF                     l1040:
  1203                           
  1204                           ;main.c: 324:     unsigned char i = 0;
  1205  03AF  01BE               	clrf	advance@i
  1206                           
  1207                           ;main.c: 326:     while (accelTable[i][0] < vel) {
  1208  03B0  2BB5               	goto	l1044
  1209  03B1                     l1042:
  1210                           
  1211                           ;main.c: 327:         i++;
  1212  03B1  3001               	movlw	1
  1213  03B2  00BA               	movwf	??_advance
  1214  03B3  083A               	movf	??_advance,w
  1215  03B4  07BE               	addwf	advance@i,f
  1216  03B5                     l1044:
  1217                           
  1218                           ;main.c: 326:     while (accelTable[i][0] < vel) {
  1219  03B5  083E               	movf	advance@i,w
  1220  03B6  00BA               	movwf	??_advance
  1221  03B7  3001               	movlw	1
  1222  03B8                     u315:
  1223  03B8  1003               	clrc
  1224  03B9  0DBA               	rlf	??_advance,f
  1225  03BA  3EFF               	addlw	-1
  1226  03BB  1D03               	skipz
  1227  03BC  2BB8               	goto	u315
  1228  03BD  1003               	clrc
  1229  03BE  0D3A               	rlf	??_advance,w
  1230  03BF  074F               	addwf	_accelTable,w
  1231  03C0  00BB               	movwf	??_advance+1
  1232  03C1  083B               	movf	??_advance+1,w
  1233  03C2  0084               	movwf	4
  1234  03C3  1383               	bcf	3,7	;select IRP bank0
  1235  03C4  0800               	movf	0,w
  1236  03C5  00BC               	movwf	??_advance+2
  1237  03C6  0A84               	incf	4,f
  1238  03C7  0800               	movf	0,w
  1239  03C8  00BD               	movwf	??_advance+3
  1240  03C9  0848               	movf	_vel+1,w
  1241  03CA  023D               	subwf	??_advance+3,w
  1242  03CB  1D03               	skipz
  1243  03CC  2BCF               	goto	u325
  1244  03CD  0847               	movf	_vel,w
  1245  03CE  023C               	subwf	??_advance+2,w
  1246  03CF                     u325:
  1247  03CF  1C03               	skipc
  1248  03D0  2BD2               	goto	u321
  1249  03D1  2BD3               	goto	u320
  1250  03D2                     u321:
  1251  03D2  2BB1               	goto	l1042
  1252  03D3                     u320:
  1253  03D3                     l1046:
  1254                           
  1255                           ;main.c: 329:     microDelay = accelTable[i][1];
  1256  03D3  083E               	movf	advance@i,w
  1257  03D4  00BA               	movwf	??_advance
  1258  03D5  3001               	movlw	1
  1259  03D6                     u335:
  1260  03D6  1003               	clrc
  1261  03D7  0DBA               	rlf	??_advance,f
  1262  03D8  3EFF               	addlw	-1
  1263  03D9  1D03               	skipz
  1264  03DA  2BD6               	goto	u335
  1265  03DB  1003               	clrc
  1266  03DC  0D3A               	rlf	??_advance,w
  1267  03DD  074F               	addwf	_accelTable,w
  1268  03DE  00BB               	movwf	??_advance+1
  1269  03DF  083B               	movf	??_advance+1,w
  1270  03E0  3E02               	addlw	2
  1271  03E1  0084               	movwf	4
  1272  03E2  0800               	movf	0,w
  1273  03E3  00C9               	movwf	_microDelay
  1274  03E4  0A84               	incf	4,f
  1275  03E5  0800               	movf	0,w
  1276  03E6  00CA               	movwf	_microDelay+1
  1277  03E7  2B34               	goto	l1008
  1278  03E8                     l114:
  1279  03E8  0008               	return
  1280  03E9                     __end_of_advance:
  1281                           
  1282                           	psect	text5
  1283  024A                     __ptext5:	
  1284 ;; *************** function _step *****************
  1285 ;; Defined at:
  1286 ;;		line 229 in file "main.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  dir             2    0[BANK0 ] int 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		wreg, btemp+1
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0
  1300 ;;      Params:         0       2
  1301 ;;      Locals:         0       0
  1302 ;;      Temps:          0       0
  1303 ;;      Totals:         0       2
  1304 ;;Total ram usage:        2 bytes
  1305 ;; Hardware stack levels used: 1
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_stepTo
  1310 ;;		_advance
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _step
  1316  024A                     _step:
  1317  024A                     l962:	
  1318                           ;incstack = 0
  1319                           ; Regs used in _step: [wreg+btemp+1]
  1320                           
  1321                           
  1322                           ;main.c: 232:     if (dir > 0) {
  1323  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1324  024B  0839               	movf	step@dir+1,w
  1325  024C  3A80               	xorlw	128
  1326  024D  00DF               	movwf	btemp+1
  1327  024E  3080               	movlw	128
  1328  024F  025F               	subwf	btemp+1,w
  1329  0250  1D03               	skipz
  1330  0251  2A54               	goto	u205
  1331  0252  3001               	movlw	1
  1332  0253  0238               	subwf	step@dir,w
  1333  0254                     u205:
  1334  0254  1C03               	skipc
  1335  0255  2A57               	goto	u201
  1336  0256  2A58               	goto	u200
  1337  0257                     u201:
  1338  0257  2A61               	goto	l97
  1339  0258                     u200:
  1340  0258                     l964:
  1341                           
  1342                           ;main.c: 234:         GP1 = 0;
  1343  0258  1283               	bcf	3,5	;RP0=0, select bank0
  1344  0259  1085               	bcf	5,1	;volatile
  1345  025A                     l966:
  1346                           
  1347                           ;main.c: 235:         currentStep++;
  1348  025A  3001               	movlw	1
  1349  025B  07CD               	addwf	_currentStep,f
  1350  025C  1803               	skipnc
  1351  025D  0ACE               	incf	_currentStep+1,f
  1352  025E  3000               	movlw	0
  1353  025F  07CE               	addwf	_currentStep+1,f
  1354                           
  1355                           ;main.c: 236:     } else {
  1356  0260  2A69               	goto	l970
  1357  0261                     l97:
  1358                           
  1359                           ;main.c: 237:         GP1 = 1;
  1360  0261  1283               	bcf	3,5	;RP0=0, select bank0
  1361  0262  1485               	bsf	5,1	;volatile
  1362  0263                     l968:
  1363                           
  1364                           ;main.c: 238:         currentStep--;
  1365  0263  3001               	movlw	1
  1366  0264  02CD               	subwf	_currentStep,f
  1367  0265  3000               	movlw	0
  1368  0266  1C03               	skipc
  1369  0267  03CE               	decf	_currentStep+1,f
  1370  0268  02CE               	subwf	_currentStep+1,f
  1371  0269                     l970:
  1372                           
  1373                           ;main.c: 241:     GP0 = 1;
  1374  0269  1405               	bsf	5,0	;volatile
  1375  026A                     l972:
  1376                           
  1377                           ;main.c: 242:     _delay((unsigned long)((stepPulseMicrosec)*(4000000/4000000.0)));
  1378  026A  0000               	nop
  1379  026B                     l974:
  1380                           
  1381                           ;main.c: 243:     GP0 = 0;
  1382  026B  1283               	bcf	3,5	;RP0=0, select bank0
  1383  026C  1005               	bcf	5,0	;volatile
  1384  026D                     l99:
  1385  026D  0008               	return
  1386  026E                     __end_of_step:
  1387                           
  1388                           	psect	text6
  1389  01C2                     __ptext6:	
  1390 ;; *************** function _ReadTimer1 *****************
  1391 ;; Defined at:
  1392 ;;		line 15 in file "./ReadTimer1.h"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;		None
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  timer           2    3[BANK0 ] struct Timers
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  2    0[BANK0 ] unsigned int 
  1399 ;; Registers used:
  1400 ;;		wreg
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMMON   BANK0
  1406 ;;      Params:         0       2
  1407 ;;      Locals:         0       2
  1408 ;;      Temps:          0       1
  1409 ;;      Totals:         0       5
  1410 ;;Total ram usage:        5 bytes
  1411 ;; Hardware stack levels used: 1
  1412 ;; This function calls:
  1413 ;;		Nothing
  1414 ;; This function is called by:
  1415 ;;		_update
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           
  1420                           ;psect for function _ReadTimer1
  1421  01C2                     _ReadTimer1:
  1422  01C2                     l976:	
  1423                           ;incstack = 0
  1424                           ; Regs used in _ReadTimer1: [wreg]
  1425                           
  1426                           
  1427                           ;./ReadTimer1.h: 17:    union Timers timer;;./ReadTimer1.h: 19:    timer.bt[0] = TMR1L;
  1428  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1429  01C3  080E               	movf	14,w	;volatile
  1430  01C4  00BA               	movwf	??_ReadTimer1
  1431  01C5  083A               	movf	??_ReadTimer1,w
  1432  01C6  00BB               	movwf	ReadTimer1@timer
  1433                           
  1434                           ;./ReadTimer1.h: 20:    timer.bt[1] = TMR1H;
  1435  01C7  080F               	movf	15,w	;volatile
  1436  01C8  00BA               	movwf	??_ReadTimer1
  1437  01C9  083A               	movf	??_ReadTimer1,w
  1438  01CA  00BC               	movwf	ReadTimer1@timer+1
  1439                           
  1440                           ;./ReadTimer1.h: 22:    return (timer.lt);
  1441  01CB  083C               	movf	ReadTimer1@timer+1,w
  1442  01CC  00B9               	movwf	?_ReadTimer1+1
  1443  01CD  083B               	movf	ReadTimer1@timer,w
  1444  01CE  00B8               	movwf	?_ReadTimer1
  1445  01CF                     l51:
  1446  01CF  0008               	return
  1447  01D0                     __end_of_ReadTimer1:
  1448                           
  1449                           	psect	text7
  1450  022E                     __ptext7:	
  1451 ;; *************** function _setPosition *****************
  1452 ;; Defined at:
  1453 ;;		line 333 in file "main.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  pos             2    0[BANK0 ] unsigned int 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, status,0, pclath, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0
  1467 ;;      Params:         0       2
  1468 ;;      Locals:         0       0
  1469 ;;      Temps:          0       0
  1470 ;;      Totals:         0       2
  1471 ;;Total ram usage:        2 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; Hardware stack levels required when called: 1
  1474 ;; This function calls:
  1475 ;;		_InitTimer1
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           
  1482                           ;psect for function _setPosition
  1483  022E                     _setPosition:
  1484  022E                     l1068:	
  1485                           ;incstack = 0
  1486                           ; Regs used in _setPosition: [wreg+status,2+status,0+pclath+cstack]
  1487                           
  1488                           
  1489                           ;main.c: 335:     if (pos >= steps) pos = steps - 1;
  1490  022E  300E               	movlw	14
  1491  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1492  0230  0239               	subwf	setPosition@pos+1,w
  1493  0231  30C4               	movlw	196
  1494  0232  1903               	skipnz
  1495  0233  0238               	subwf	setPosition@pos,w
  1496  0234  1C03               	skipc
  1497  0235  2A37               	goto	u341
  1498  0236  2A38               	goto	u340
  1499  0237                     u341:
  1500  0237  2A3C               	goto	l135
  1501  0238                     u340:
  1502  0238                     l1070:
  1503  0238  30C3               	movlw	195
  1504  0239  00B8               	movwf	setPosition@pos
  1505  023A  300E               	movlw	14
  1506  023B  00B9               	movwf	setPosition@pos+1
  1507  023C                     l135:
  1508                           
  1509                           ;main.c: 336:     targetStep = pos;
  1510  023C  0839               	movf	setPosition@pos+1,w
  1511  023D  00CC               	movwf	_targetStep+1
  1512  023E  0838               	movf	setPosition@pos,w
  1513  023F  00CB               	movwf	_targetStep
  1514  0240                     l1072:
  1515                           
  1516                           ;main.c: 337:     if (stopped) {
  1517  0240  1C50               	btfss	_stopped/(0+8),_stopped& (0+7)
  1518  0241  2A43               	goto	u351
  1519  0242  2A44               	goto	u350
  1520  0243                     u351:
  1521  0243  2A49               	goto	l137
  1522  0244                     u350:
  1523  0244                     l1074:
  1524                           
  1525                           ;main.c: 339:         stopped = 0;
  1526  0244  1050               	bcf	_stopped/(0+8),_stopped& (0+7)
  1527  0245                     l1076:
  1528                           
  1529                           ;main.c: 340:         InitTimer1();
  1530  0245  21B4               	fcall	_InitTimer1
  1531  0246                     l1078:
  1532                           
  1533                           ;main.c: 341:         microDelay = 0;
  1534  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1535  0247  01C9               	clrf	_microDelay
  1536  0248  01CA               	clrf	_microDelay+1
  1537  0249                     l137:
  1538  0249  0008               	return
  1539  024A                     __end_of_setPosition:
  1540                           
  1541                           	psect	text8
  1542  01B4                     __ptext8:	
  1543 ;; *************** function _InitTimer1 *****************
  1544 ;; Defined at:
  1545 ;;		line 131 in file "main.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMMON   BANK0
  1559 ;;      Params:         0       0
  1560 ;;      Locals:         0       0
  1561 ;;      Temps:          0       0
  1562 ;;      Totals:         0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used: 1
  1565 ;; This function calls:
  1566 ;;		Nothing
  1567 ;; This function is called by:
  1568 ;;		_advance
  1569 ;;		_setPosition
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           
  1574                           ;psect for function _InitTimer1
  1575  01B4                     _InitTimer1:
  1576  01B4                     l948:	
  1577                           ;incstack = 0
  1578                           ; Regs used in _InitTimer1: [wreg+status,2]
  1579                           
  1580                           
  1581                           ;main.c: 135:     T1CON = 0x00;
  1582  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1583  01B5  0190               	clrf	16	;volatile
  1584  01B6                     l950:
  1585                           
  1586                           ;main.c: 136:     __nop();
  1587  01B6  0000               	nop
  1588                           
  1589                           ;main.c: 138:     TMR1H = 0;
  1590  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1591  01B8  018F               	clrf	15	;volatile
  1592                           
  1593                           ;main.c: 139:     TMR1L = 0;
  1594  01B9  018E               	clrf	14	;volatile
  1595  01BA                     l952:
  1596                           
  1597                           ;main.c: 142:     T1CON = 0x01;
  1598  01BA  3001               	movlw	1
  1599  01BB  0090               	movwf	16	;volatile
  1600  01BC                     l954:
  1601                           
  1602                           ;main.c: 145:     T1IF = 0;
  1603  01BC  100C               	bcf	12,0	;volatile
  1604  01BD                     l956:
  1605                           
  1606                           ;main.c: 146:     T1IE = 0;
  1607  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1608  01BE  100C               	bcf	12,0	;volatile
  1609  01BF                     l958:
  1610                           
  1611                           ;main.c: 147:     PEIE = 0;
  1612  01BF  130B               	bcf	11,6	;volatile
  1613  01C0                     l960:
  1614                           
  1615                           ;main.c: 148:     GIE = 0;
  1616  01C0  138B               	bcf	11,7	;volatile
  1617  01C1                     l78:
  1618  01C1  0008               	return
  1619  01C2                     __end_of_InitTimer1:
  1620                           
  1621                           	psect	text9
  1622  01F0                     __ptext9:	
  1623 ;; *************** function _SwitecX12_init *****************
  1624 ;; Defined at:
  1625 ;;		line 156 in file "main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0
  1639 ;;      Params:         0       0
  1640 ;;      Locals:         0       0
  1641 ;;      Temps:          0       1
  1642 ;;      Totals:         0       1
  1643 ;;Total ram usage:        1 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_main
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           
  1653                           ;psect for function _SwitecX12_init
  1654  01F0                     _SwitecX12_init:
  1655  01F0                     l1050:	
  1656                           ;incstack = 0
  1657                           ; Regs used in _SwitecX12_init: [wreg+status,2]
  1658                           
  1659                           
  1660                           ;main.c: 158:     dir = 0;
  1661  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1662  01F1  01C5               	clrf	_dir
  1663  01F2  01C6               	clrf	_dir+1
  1664                           
  1665                           ;main.c: 159:     vel = 0;
  1666  01F3  01C7               	clrf	_vel
  1667  01F4  01C8               	clrf	_vel+1
  1668  01F5                     l1052:
  1669                           
  1670                           ;main.c: 160:     stopped = 1;
  1671  01F5  1450               	bsf	_stopped/(0+8),_stopped& (0+7)
  1672                           
  1673                           ;main.c: 161:     currentStep = 0;
  1674  01F6  01CD               	clrf	_currentStep
  1675  01F7  01CE               	clrf	_currentStep+1
  1676                           
  1677                           ;main.c: 162:     targetStep = 0;
  1678  01F8  01CB               	clrf	_targetStep
  1679  01F9  01CC               	clrf	_targetStep+1
  1680  01FA                     l1054:
  1681                           
  1682                           ;main.c: 164:     accelTable = defaultAccelTable;
  1683  01FA  3024               	movlw	(low (_defaultAccelTable| 0))& (0+255)
  1684  01FB  00B8               	movwf	??_SwitecX12_init
  1685  01FC  0838               	movf	??_SwitecX12_init,w
  1686  01FD  00CF               	movwf	_accelTable
  1687  01FE                     l1056:
  1688                           
  1689                           ;main.c: 165:     maxVel = defaultAccelTable[(sizeof(defaultAccelTable)/sizeof(*defaultA
      +                          ccelTable)) - 1][0];
  1690  01FE  0835               	movf	_defaultAccelTable+17,w
  1691  01FF  00A1               	movwf	_maxVel+1
  1692  0200  0834               	movf	_defaultAccelTable+16,w
  1693  0201  00A0               	movwf	_maxVel
  1694  0202                     l81:
  1695  0202  0008               	return
  1696  0203                     __end_of_SwitecX12_init:
  1697  005E                     btemp	set	94	;btemp
  1698  005E                     wtemp0	set	94
  1699                           
  1700                           	psect	config
  1701                           
  1702                           ;Config register CONFIG @ 0x2007
  1703                           ;	Oscillator Selection bits
  1704                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  1705                           ;	Watchdog Timer Enable bit
  1706                           ;	WDTE = OFF, WDT disabled
  1707                           ;	Power-Up Timer Enable bit
  1708                           ;	PWRTE = OFF, PWRT disabled
  1709                           ;	GP3/MCLR pin function select
  1710                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  1711                           ;	Brown-out Detect Enable bit
  1712                           ;	BOREN = OFF, BOD disabled
  1713                           ;	Code Protection bit
  1714                           ;	CP = OFF, Program Memory code protection is disabled
  1715                           ;	Data Code Protection bit
  1716                           ;	CPD = OFF, Data memory code protection is disabled
  1717  2007                     	org	8199
  1718  2007  3194               	dw	12692

Data Sizes:
    Strings     0
    Constant    4
    Data        24
    BSS         10
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     13      49

Pointer List with Targets:

    accelTable	PTR unsigned int [2] size(1) Largest target is 20
		 -> NULL(NULL[0]), defaultAccelTable(BANK0[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _zero->_stepTo
    _stepTo->_step
    _update->_advance
    _advance->_step

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     996
                                              9 BANK0      4     4      0
                     _SwitecX12_init
                        _setPosition
                             _update
                               _zero
 ---------------------------------------------------------------------------------
 (1) _zero                                                 0     0      0     364
                             _stepTo
 ---------------------------------------------------------------------------------
 (2) _stepTo                                               7     5      2     364
                                              2 BANK0      7     5      2
                               _step
 ---------------------------------------------------------------------------------
 (1) _update                                               0     0      0     335
                         _ReadTimer1
                            _advance
 ---------------------------------------------------------------------------------
 (2) _advance                                              7     7      0     288
                                              2 BANK0      7     7      0
                         _InitTimer1
                               _step
 ---------------------------------------------------------------------------------
 (3) _step                                                 2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadTimer1                                           5     3      2      47
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _setPosition                                          2     0      2     273
                                              0 BANK0      2     0      2
                         _InitTimer1
 ---------------------------------------------------------------------------------
 (3) _InitTimer1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SwitecX12_init                                       1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SwitecX12_init
   _setPosition
     _InitTimer1
   _update
     _ReadTimer1
     _advance
       _InitTimer1
       _step
   _zero
     _stepTo
       _step

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E      D      31       4       79.0%
BITBANK0            3E      0       1       3        1.6%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      31       6        0.0%
ABS                  0      0      31       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Feb 08 22:05:41 2022

                        pc 0002                         l51 01CF                         l81 0202  
                       l78 01C1                         l97 0261                         l99 026D  
                       fsr 0004                        l110 01EF                        l114 03E8  
                      l107 02B1                        l126 03A7                        l142 0215  
                      l135 023C                        l119 034F                        l137 0249  
                      l950 01B6                        l960 01C0                        l952 01BA  
                      l954 01BC                        l970 0269                        l962 024A  
                      l956 01BD                        l948 01B4                        l972 026A  
                      l964 0258                        l980 026E                        _GP0 0028  
                      _GP1 0029                        l958 01BF                        l974 026B  
                      l966 025A                        l990 0292                        l982 0279  
                      _GP2 002A                        l976 01C2                        l968 0263  
                      l992 0295                        l984 027D                        l994 029A  
                      l986 0286                        _GIE 005F                        l996 02A0  
                      l988 028A                        l998 02A7                        u200 0258  
                      u201 0257                        u210 0279                        u211 0278  
                      u300 03A0                        u220 02B1                        u205 0254  
                      u301 039F                        u221 02B0                        u230 032B  
                      u231 032A                        u215 0275                        u320 03D3  
                      u240 0331                        u321 03D2                        u305 039C  
                      u241 0330                        u225 02AD                        u250 033C  
                      u315 03B8                        u251 033B                        u235 0327  
                      u340 0238                        u260 0346                        u341 0237  
                      u325 03CF                        u261 0345                        u350 0244  
                      u270 0366                        u351 0243                        u335 03D6  
                      u271 0365                        u407 02D8                        u280 0386  
                      u360 0208                        u281 0385                        u265 0342  
                      u361 0207                        u417 02E5                        u290 0391  
                      u370 0214                        u291 0390                        u275 0362  
                      u371 0213                        u427 029D                        u285 0382  
                      u295 038D                        u375 0210                        u385 02F0  
                      u397 02CB                        _WPU 0095                        _dir 0045  
                      _vel 0047                        fsr0 0004                        indf 0000  
          ReadTimer1@timer 003B                       l1000 0320                       l1002 032B  
                     l1020 0353                       l1004 0331                       l1012 0336  
                     l1100 02C3                       l1030 0386                       l1022 0358  
                     l1014 033C                       l1006 0332                       l1110 02DE  
                     l1102 02C4                       l1040 03AF                       l1032 0391  
                     l1024 0366                       l1016 0346                       l1008 0334  
                     l1112 02EC                       l1104 02D2                       l1050 01F0  
                     l1042 03B1                       l1034 0396                       l1026 0370  
                     l1018 034B                       l1114 02FB                       l1122 030D  
                     l1106 02D4                       l1052 01F5                       l1044 03B5  
                     l1036 03A0                       l1028 0379                       l1060 01E4  
                     l1116 0301                       l1124 031D                       l1108 02DD  
                     l1054 01FA                       l1070 0238                       l1046 03D3  
                     l1038 03A8                       l1062 01E8                       l1118 0307  
                     l1056 01FE                       l1072 0240                       l1080 0203  
                     l1064 01EB                       l1074 0244                       l1082 0208  
                     l1066 01ED                       l1058 01DF                       l1162 0315  
                     l1090 02B8                       l1076 0245                       l1068 022E  
                     l1084 0214                       l1092 02BA                       l1078 0246  
                     l1094 02BD                       l1086 02B2                       l1096 02BF  
                     l1088 02B6                       l1098 02C2                       _T1IE 0460  
                     _T1IF 0060                       _GPIE 005B                       _GPIO 0005  
                     _PEIE 005E                       _main 02B2                       _step 024A  
                     btemp 005E                       _zero 01DF                       start 0000  
                    ?_main 0038                      _CMCON 0019                      ?_step 0038  
                    _ANSEL 009F                      ?_zero 0038                      _T1CON 0010  
                    _TMR1H 000F                      _TMR1L 000E                      _VRCON 0099  
          __end_of_advance 03E9                      _steps 0022                      pclath 000A  
                    status 0003                      wtemp0 005E            __initialization 03E9  
               _InitTimer1 01B4             _SwitecX12_init 01F0               __end_of_main 0320  
             __end_of_step 026E                 _ReadTimer1 01C2               __end_of_zero 01F0  
           setPosition@pos 0038                     ??_main 0041                     ??_step 0000  
                   ??_zero 0000                     _ADCON0 001F               ?_setPosition 0038  
                   _TRISIO 0085     __end_of_SwitecX12_init 0203                     _maxVel 0020  
                ??_advance 003A                     _update 0203                     _stepTo 026E  
        _resetStepMicrosec 0007    __end_of__initialization 03FD            ?_SwitecX12_init 0038  
              ?_InitTimer1 0038             __pcstackCOMMON 0000                 _accelTable 004F  
             __pidataBANK0 0216                ?_ReadTimer1 0038  __end_of_resetStepMicrosec 0009  
             __pbitnvBANK0 0280             _OPTION_REGbits 0081                 __pbssBANK0 0045  
               __pmaintext 02B2                    ?_update 0038                    ?_stepTo 003A  
      __size_of_InitTimer1 000E                 __stringtab 0001        __size_of_ReadTimer1 000E  
     __size_of_setPosition 001C                 _microDelay 0049                    _advance 0320  
                  __ptext1 01DF                    __ptext2 026E                    __ptext3 0203  
                  __ptext4 0320                    __ptext5 024A                    __ptext6 01C2  
                  __ptext7 022E                    __ptext8 01B4                    __ptext9 01F0  
          __size_of_update 0013            __size_of_stepTo 0044                    _stopped 0280  
     end_of_initialization 03FD                 _targetStep 004B                    step@dir 0038  
                  stepTo@i 003F           ??_SwitecX12_init 0038               ??_InitTimer1 0000  
             ??_ReadTimer1 003A             __end_of_update 0216             __end_of_stepTo 02B2  
      start_initialization 03E9                stepTo@count 003D         __end_of_InitTimer1 01C2  
        _defaultAccelTable 0024         __end_of_ReadTimer1 01D0             stepTo@position 003A  
               init_fetch0 01D0                __pdataBANK0 0020                   ??_update 0000  
                 ??_stepTo 003C                  ___latbits 0000              __pcstackBANK0 0038  
             advance@delta 003F                  __pnvBANK0 004F                   ?_advance 0038  
                __pstrings 0001              ??_setPosition 0000                __stringbase 0006  
        _stepPulseMicrosec 0009        __end_of_setPosition 024A         __end_of__stringtab 0007  
         __size_of_advance 00C9                _currentStep 004D  __end_of_stepPulseMicrosec 000B  
                 advance@i 003E              __size_of_main 006E              __size_of_step 0024  
            __size_of_zero 0011                   init_ram0 01D4                _setPosition 022E  
                stringcode 0001    __size_of_SwitecX12_init 0013                   stringdir 0001  
                 stringtab 0001               main@GP_input 0044  
